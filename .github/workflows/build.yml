name: Build
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  SonarCloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install dependencies
        run: npm install
      - name: Test and coverage
        run: npm run test
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  BuildAndPushImageToECR:
    needs: [SonarCloud]
    name: "Build and Push to ECR"
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: v1
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  
  SendErrorNotification:
    needs: [SonarCloud, BuildAndPushImageToECR]
    runs-on: ubuntu-latest
    if: failure()

    steps:
      - name: Configure Error Mock Connection
        id: configure_error_mock
        run: |
          echo '{
            "text": "¡Ha ocurrido un error en el job SendErrorNotification! Revisa los detalles en GitHub Actions.",
            "attachments": [
              {
                "title": "Detalles del job:",
                "fields": [
                  {
                    "title": "Tiempo de ejecución:",
                    "value": "${{ job.completed_at }} - ${{ job.started_at }}",
                    "short": true
                  }
                ]
              },
              {
                "title": "Resultados de los jobs anteriores:",
                "fields": [
                  {
                    "title": "SonarCloud:",
                    "value": "${{ needs.SonarCloud.result }}",
                    "short": true
                  },
                  {
                    "title": "BuildAndPushImageToECR:",
                    "value": "${{ needs.BuildAndPushImageToECR.result }}",
                    "short": true
                  }
                ]
              },
              {
                "title": "Enlace al registro del job:",
                "text": "Ver detalles del job SendErrorNotification: ${{ job.statuses_url }}"
              }
            ]
          }' > error_mock_payload.json

      - name: Send Google Chat error notification
        env:
          GOOGLE_CHAT_WEBHOOK: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
        run: |
          curl -X POST -H 'Content-Type: application/json' --data "@error_mock_payload.json" $GOOGLE_CHAT_WEBHOOK

  SendSuccessNotification:
    needs: [SonarCloud, BuildAndPushImageToECR]
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Configure Success Mock Connection
        id: configure_success_mock
        run: |
          echo '{
            "text": "¡El job SendSuccessNotification ha finalizado con éxito!",
            "attachments": [
              {
                "title": "Detalles del job:",
                "fields": [
                  {
                    "title": "Tiempo de ejecución:",
                    "value": "${{ job.completed_at }} - ${{ job.started_at }}",
                    "short": true
                  }
                ]
              },
              {
                "title": "Resultados de los jobs anteriores:",
                "fields": [
                  {
                    "title": "SonarCloud:",
                    "value": "${{ needs.SonarCloud.result }}",
                    "short": true
                  },
                  {
                    "title": "BuildAndPushImageToECR:",
                    "value": "${{ needs.BuildAndPushImageToECR.result }}",
                    "short": true
                  }
                ]
              }
            ]
          }' > success_mock_payload.json

      - name: Send Google Chat success notification
        env:
          GOOGLE_CHAT_WEBHOOK: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
        run: |
          curl -X POST -H 'Content-Type: application/json' --data "@success_mock_payload.json" $GOOGLE_CHAT_WEBHOOK